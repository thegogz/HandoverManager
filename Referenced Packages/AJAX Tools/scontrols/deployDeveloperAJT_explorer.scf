<html>
<!--
Generated by AJAX tools
Date : Mon Dec 11 2006 22:24:07 GMT-0800 (Pacific Standard Time)
Template : simple.html by manoj@cheenath.com
Author : manoj
-->
<head>

<LINK REL="SHORTCUT ICON" HREF="/img/radardish_page_icon.gif">
<title>Explorer</title>

<script src="/js/functions.js"></script>
<script src="/soap/ajax/10.0/connection.js"></script>

<script type="text/javascript">

    if (!sforce.connection.sessionId) {
        var sid = getCookie("sid");
        if (sid) {
            sforce.connection.sessionId = sid;
        } else {
            window.location = "/?startURL=" + window.location;
        }
    }

</script>

<script src="/js/dojo/0.4.1/dojo.js"></script>

<script>
    dojo.require("dojo.widget.ComboBox");
    dojo.require("dojo.widget.LayoutContainer");
    dojo.require("dojo.widget.ContentPane");
    dojo.require("dojo.widget.LinkPane");
    dojo.require("dojo.widget.SplitContainer");
    dojo.require("dojo.widget.ColorPalette");
    dojo.require("dojo.widget.TabContainer");
    dojo.require("dojo.widget.Tooltip");
    dojo.require("dojo.widget.Tree");
    dojo.require("dojo.event.*");
    dojo.require("dojo.lang.*");
    dojo.require("dojo.widget.*");
    dojo.require("dojo.widget.Dialog");
    dojo.require("dojo.widget.Select");
    //dojo.require("dojo.widget.ComboBox");
</script>

<script>

sforce.tools = {};
sforce.tools.explorer = {};
sforce.tools.explorer.root = {};
sforce.tools.explorer.fields = {};
sforce.tools.explorer.parent = {};
sforce.tools.explorer.children = {};
sforce.tools.explorer.describeCache = [];

sforce.tools.explorer.init = function () {
    if (navigator.appName.indexOf("Microsoft") != -1) {
        document.getElementById("construct-query").style.display = "block";
    }

    sforce.tools.explorer.result_div = document.getElementById("result-div");
    sforce.tools.explorer.soql_ta = document.getElementById("soql-ta");
    sforce.tools.explorer.tree_div = document.getElementById("tree-div");

    var div = document.getElementById("sobject");
    var result = sforce.connection.describeGlobal();
    var types = result.types;

    var options = [];
    options.push("<option value=\"Select One\">Select One</option>");
    for (var i = 0; i < types.length; i++) {
        options.push("<option value=\""+ types[i] + "\">" + types[i] + "</option>");
    }

    if (navigator.appName.indexOf("Microsoft") != -1) {
        div.outerHTML = '<select name="state" id="sobject" autocomplete="true" ' +
        'onChange="javascript: sforce.tools.explorer.sobjectSelected();">' +
                    options.join("\n") +
                    "</select>";
    } else {
        div.innerHTML = options.join(" ");
    }
}

dojo.addOnLoad(sforce.tools.explorer.init);

sforce.tools.explorer.sobjectSelected = function () {
    var div = document.getElementById("sobject");
    var sobj = div.options[div.selectedIndex].value;
    if ("Select One" === sobj) {
        this.resetOptions();
        return;
    }
    dojo.widget.byId("please-wait-dialog").show();

    var message = "Please Wait - loading ... " + div.value + ". It may take a min to two";
    sforce.tools.explorer.tree_div.innerHTML = message
    this.logMessage(message);
    setTimeout("sforce.tools.explorer.startTreeBuilding()", 100);
}

sforce.tools.explorer.startTreeBuilding = function () {
    sforce.tools.explorer.tree_div.innerHTML = "";
    var div = document.getElementById("sobject");
    var sobj = div.options[div.selectedIndex].value;
    var tree = dojo.widget.createWidget("Tree", {});

    this.root = dojo.widget.createWidget("TreeNode",
    {title: sobj});
    this.root.expandLevel = 2;
    tree.addChild(this.root);

    this.fields = dojo.widget.createWidget("TreeNode",
    {title: "Fields"});
    this.fields.expandLevel = 2;
    this.parents = dojo.widget.createWidget("TreeNode",
    {title: "Parents"});
    this.parents.expandLevel = 2;
    this.children = dojo.widget.createWidget("TreeNode",
    {title: "Children"});
    this.children.expandLevel = 2;

    this.root.addChild(this.fields);
    this.root.addChild(this.parents);
    this.root.addChild(this.children);

    sforce.tools.explorer.createTree(sobj);
    sforce.tools.explorer.tree_div.appendChild(tree.domNode);
    this.logMessage("Done");
    dojo.widget.byId("please-wait-dialog").hide();
}


sforce.tools.explorer.describe = function(sobj) {
    if (this.describeCache[sobj] != null) {
        return this.describeCache[sobj];
    }
    var res = sforce.connection.describeSObject(sobj);
    this.describeCache[sobj] = res;
    return res;
}

sforce.tools.explorer.createTree = function(sobj) {

    var result = this.describe(sobj);
    var fields = result.getArray("fields");

    for (var i = 0; i < fields.length; i++) {
        var field = fields[i];

        if (field.referenceTo != null) {
            var name = field.relationshipName;
            if (name == null) {
                name = field.name.replace(/Id$/, "");
            }
            var node = dojo.widget.createWidget(
                    "TreeNode", {title: name});
            /*
            var tooltip = dojo.widget.createWidget("Tooltip",
                {connectId : node.domNode.id, caption: "hi there"});
            document.body.appendChild(tooltip.domNode);
            */

            var ref = field.getArray("referenceTo")[0];
            this.addRelationshipNodes(node, this.parents, ref);
        } else {
            var node = dojo.widget.createWidget(
                    "TreeNode", {title: field.name});
            this.addFieldNodes(node, this.fields);
        }
    }

    var childRelationships = result.getArray("childRelationships");
    for (var i = 0; i < childRelationships.length; i++) {
        var relationship = childRelationships[i];
        if (relationship.relationshipName != null) {
            var node = dojo.widget.createWidget(
                    "TreeNode", {title: relationship.relationshipName});
            this.addRelationshipNodes(node, this.children, relationship.childSObject);
        }
    }
}

sforce.tools.explorer.addRelationshipNodes = function(node, parents, sobj) {
    parents.addChild(node);
    var result = this.describe(sobj);
    var fields = result.getArray("fields");

    for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        var child = dojo.widget.createWidget(
                "TreeNode", {title: field.name});

        if (field.referenceTo != null) {
            //skip
        } else {
            this.addFieldNodes(child, node);
        }
    }
}

sforce.tools.explorer.addFieldNodes = function(node, parent) {
    var checkBox = document.createElement('input');
    checkBox.setAttribute('name', node.objectId);
    checkBox.setAttribute('type', 'checkbox');
    checkBox.setAttribute('onChange', 'sforce.tools.explorer.fieldChanged()');

    dojo.html.setClass(checkBox, 'treeCheckBox');

    dojo.dom.insertBefore(checkBox, node.titleNode);
    node.fieldCheckBox = checkBox;
    parent.addChild(node);
}

sforce.tools.explorer.fieldChanged = function() {
    var fieldsSoql = [];
    for (var i = 0; i < this.fields.children.length; i++) {
        if (this.fields.children[i].fieldCheckBox.checked === true) {
            fieldsSoql.push(this.fields.children[i].title);
        }
    }

    for (var i = 0; i < this.parents.children.length; i++) {
        var parent = this.parents.children[i];
        for (var j = 0; j < parent.children.length; j++) {
            var parentField = parent.children[j];
            if (parentField.fieldCheckBox.checked === true) {
                fieldsSoql.push(parent.title + "." + parentField.title);
            }
        }
    }

    for (var i = 0; i < this.children.children.length; i++) {
        var top = this.children.children[i];
        var subsoql = [];
        for (var j = 0; j < top.children.length; j++) {
            var topField = top.children[j];
            if (topField.fieldCheckBox.checked === true) {
                subsoql.push(topField.title);
            }
        }
        if (subsoql.length > 0) {
            fieldsSoql.push("(SELECT " + subsoql.join(", ") + " FROM " + top.title + ")");
        }
    }


    var soql = "SELECT " + fieldsSoql.join(", ") +
               " FROM " + this.root.title + " LIMIT 20";

    sforce.tools.explorer.soql_ta.value = soql;
}

sforce.tools.explorer.resetOptions = function () {
    sforce.tools.explorer.result_div.innerHTML = "Select an SObject";
    sforce.tools.explorer.soql_ta.value = "Please select SObject in the left pane";
    sforce.tools.explorer.tree_div.innerHTML = "";
}

sforce.tools.explorer.runQuery = function () {
    sforce.tools.explorer.result_div.innerHTML = "Running Query ... ";
    sforce.connection.query(sforce.tools.explorer.soql_ta.value, {
        onSuccess : sforce.tools.explorer.querySuccess,
        onFailure : sforce.tools.explorer.logMessage
    });
}

sforce.tools.explorer.runQueryAll = function () {
    sforce.tools.explorer.result_div.innerHTML = "Running Query All ... ";
    sforce.connection.queryAll(sforce.tools.explorer.soql_ta.value, {
        onSuccess : sforce.tools.explorer.querySuccess,
        onFailure : sforce.tools.explorer.logMessage
    });
}
       

sforce.tools.explorer.showDescribe = function () {
    var sobj = this.getSObject();
    if (sobj) {
        var res = this.describe(sobj);
        this.logMessage(res);
    }
}

sforce.tools.explorer.showTabs = function () {
    sforce.tools.explorer.result_div.innerHTML = "Getting Tabs ... ";
    sforce.connection.describeTabs({
        onSuccess : sforce.tools.explorer.logMessage,
        onFailure : sforce.tools.explorer.logMessage
    });
}

sforce.tools.explorer.showTime = function () {
    sforce.tools.explorer.result_div.innerHTML = "Getting Server Time ... ";
    sforce.connection.getServerTimestamp({
        onSuccess : sforce.tools.explorer.logMessage,
        onFailure : sforce.tools.explorer.logMessage
    });
}


sforce.tools.explorer.showLayout = function () {
    sforce.tools.explorer.result_div.innerHTML = "Getting layout ... ";
    var sobj = this.getSObject();
    if (sobj) {
        sforce.connection.describeLayout(sobj,[], {
            onSuccess : sforce.tools.explorer.logMessage,
            onFailure : sforce.tools.explorer.logMessage
        });
    }
}

sforce.tools.explorer.generateSample = function () {
    var sobj = this.getSObject();
    if (!sobj) return;

    var fieldsSoql = [];
    for (var i = 0; i < this.fields.children.length; i++) {
        if (this.fields.children[i].fieldCheckBox.checked === true) {
            fieldsSoql.push(this.fields.children[i].title);
        }
    }

    for (var i = 0; i < this.parents.children.length; i++) {
        var parent = this.parents.children[i];
        for (var j = 0; j < parent.children.length; j++) {
            var parentField = parent.children[j];
            if (parentField.fieldCheckBox.checked === true) {
                fieldsSoql.push(parent.title + "." + parentField.title);
            }
        }
    }

var sam = [];
sam.push('<html>');
sam.push('<head>');
sam.push('<script src="/soap/ajax/10.0/connection.js"><\/script>');
sam.push('<script src="/js/dojo/0.4.1/dojo.js"><\/script>');
sam.push('');
sam.push('<script>');
sam.push('  dojo.addOnLoad(init);');
sam.push('');
sam.push('function init() {');
sam.push('  var callback = {');
sam.push('    onSuccess : displayResult,');
sam.push('    onFailure : displayError');
sam.push('  };');

var query = sforce.tools.explorer.soql_ta.value;
sam.push('  sforce.connection.query("' + query + '", callback);');
    
sam.push('}');
sam.push('');
sam.push('function displayResult(result) {');
sam.push('  var it = new sforce.QueryResultIterator(result);');
sam.push('  var html = [];');
sam.push('  while(it.hasNext()) {');
sam.push('    var record = it.next();');

    for (var i = 0; i < this.fields.children.length; i++) {
        if (this.fields.children[i].fieldCheckBox.checked === true) {
            var field = this.fields.children[i].title;
            sam.push('    html.push("' + field + ' = " + record.' + field + ' + "<br>");');
        }
    }

    for (var i = 0; i < this.parents.children.length; i++) {
        var parent = this.parents.children[i];
        if (!this.isChecked(parent)) {
            continue;
        }
        sam.push('    if (record.' + parent.title + ') {');
        for (var j = 0; j < parent.children.length; j++) {
            var parentField = parent.children[j];
            if (parentField.fieldCheckBox.checked === true) {
                var field = (parent.title + "." + parentField.title);
                sam.push('      html.push("' + field + ' = " + record.' + field + ' + "<br>");');
            }
        }
        sam.push('    }');
    }

    for (var i = 0; i < this.children.children.length; i++) {
        var top = this.children.children[i];
        if (!this.isChecked(top)) {
            continue;
        }
        sam.push('    if (record.' + top.title + ') {');
        sam.push('      display' + top.title + 'Result(new sforce.QueryResultIterator(record.'+top.title+'), html);');
        sam.push('    }');
   }


sam.push('    html.push("<hr>");');
sam.push('    html.push("<br>");');
sam.push('  }');
sam.push('');
sam.push('  document.getElementById("output-div").innerHTML = html.join("");');
sam.push('}');

        for (var i = 0; i < this.children.children.length; i++) {
        var top = this.children.children[i];
        if (!this.isChecked(top)) {
            continue;
        }
        sam.push('function display' + top.title + 'Result(it, html) {');
        sam.push('  while(it.hasNext()) {');
        sam.push('    var record = it.next();');
        for (var j = 0; j < top.children.length; j++) {
            var topField = top.children[j];
            if (topField.fieldCheckBox.checked === true) {
                var field = topField.title;
                sam.push('      html.push("' + field + ' = " + record.' + field + ' + "<br>");');
            }
        }
        sam.push('  }');
        sam.push('}');
    }

sam.push('');
sam.push('function displayError(error) {');
sam.push('  document.getElementById("output-div").innerHTML =');
sam.push('    "oops something went wrong ... " + error;');
sam.push('}');
sam.push('<\/script>');
sam.push('');
sam.push('');
sam.push('</head>');
sam.push('<body>');
sam.push('');
sam.push('  <div id="output-div"></div>');
sam.push('');
sam.push('</body>');
sam.push('</html>');




    var html = sam.join("\n");
    html = html.replace(/</g, "&lt;");
    html = html.replace(/>/g, "&gt;");

    html = "<pre>" + html + "</pre>";

    sforce.tools.explorer.result_div.innerHTML = html; 
}

sforce.tools.explorer.isChecked = function (parent) {
    for (var j = 0; j < parent.children.length; j++) {
        var parentField = parent.children[j];
        if (parentField.fieldCheckBox.checked === true) {
            return true;
        }
    }
    return false;
}

sforce.tools.explorer.getSObject = function () {
    var div = document.getElementById("sobject");
    if ("Select One" === div.value) {
        alert("Please select an SObject");
        return null;
    }
    return div.value;
}

sforce.tools.explorer.userInfo = function () {
    sforce.tools.explorer.result_div.innerHTML = "User info ... ";
    sforce.connection.getUserInfo({
        onSuccess : sforce.tools.explorer.logMessage,
        onFailure : sforce.tools.explorer.logMessage
    });
}


sforce.tools.explorer.logMessage = function (error) {
    var sb = new sforce.StringBuffer();
    sforce.tools.explorer.convert(error, sb, true);
    sforce.tools.explorer.result_div.innerHTML = sb.toString();
}

sforce.tools.explorer.querySuccess = function (result) {
    var sb = new sforce.StringBuffer();
    sforce.tools.explorer.convert(result.getArray("records"), sb, true);
    sforce.tools.explorer.result_div.innerHTML = sb.toString();
}

sforce.tools.explorer.convert = function (s, sb, isFirst) {
    if (s == null) {
        sb.append("null");
        return;
    }

    var tof = typeof s;

    if (tof == "string" || tof == "number" || tof == "function") {
        sb.append(s);
        return;
    } else if (tof == "object") {
        if (s.push && s.length > 0 && (typeof s[0] === "object")) {
            sb.append(this.makeExpandLink(isFirst) + "<table>");
            var heading = this.findHeading(s);
            sb.append("<tr>");
            for (var head in heading) {
                sb.append("<td><b>" + head + "</b></td>");
            }
            sb.append("</tr>");
            for (var i = 0; i < s.length; i++) {
                sb.append("<tr>");
                for (var head in heading) {
                    sb.append("<td>");
                    this.convert(s[i][head], sb, false);
                    sb.append("</td>");
                }
                sb.append("</tr>");
            }
            sb.append("</table></span>");
        } else {
            sb.append(this.makeExpandLink(isFirst) + "<table>");
            var arrays = [];
            for (var a in s) {
                if (typeof s[a] == "function") {
                    //skip
                } else if (s[a] && s[a].push) {
                    arrays[a] = s[a];
                } else {
                    sb.append("<tr><td><b>" + a + "</b></td><td>");
                    this.convert(s[a], sb, false);
                    sb.append("</td></tr>");
                }
            }
            for (var a in arrays) {
                sb.append("<tr><td colspan='2'>");
                sb.append("<b>" + a + "</b>");
                this.convert(arrays[a], sb, false);
                sb.append("</td></tr>")
            }
            sb.append("</table></span>");
        }
    }
}

sforce.tools.explorer._linkCount = 0;
sforce.tools.explorer.makeExpandLink = function (isFirst) {
    this._linkCount++;
    var rand = new Date().getTime() + "-" + this._linkCount;
    var display = isFirst ? "block" : "none";

    var img = isFirst ? "/js/dojo/0.4.1/src/widget/templates/images/treenode_expand_minus.gif" :
              "/js/dojo/0.4.1/src/widget/templates/images/treenode_expand_plus.gif";

    return "<img id=\"" + rand + "-img\" src=\""+ img + "\" " +
           "onclick='javascript: sforce.tools.explorer.displayElement(\"" + rand + "\"); void 0;'>" +
           "<span style='display: " + display + "' id='" + rand + "'>";

}

sforce.tools.explorer.displayElement = function(id) {
    var doc = document.getElementById(id);
    if (doc.style.display == 'none') {
        doc.style.display = 'block';
        document.getElementById(id + "-img").src =
        "/js/dojo/0.4.1/src/widget/templates/images/treenode_expand_minus.gif";
    } else {
        doc.style.display = 'none';
        document.getElementById(id + "-img").src =
        "/js/dojo/0.4.1/src/widget/templates/images/treenode_expand_plus.gif";
    }
}

sforce.tools.explorer.findHeading = function(array) {
    var heading = [];
    for (var i = 0; i < array.length; i++) {
        for (var a in array[i]) {
            if (typeof array[i][a] != "function") {
                heading[a] = true;
            }
        }
    }
    return heading;
}


</script>
<style>

    .dojoDialog {
        background : #eee;
        border : 1px solid #999;
        -moz-border-radius : 5px;
        padding : 4px;
    }

    /*
    html, body {
        width: 100%; 
        height: 100%;
        overflow: auto;
        padding: 0 0 0 0;
        margin: 0 0 0 0;
    }*/

    img {
        border: 0;
    }

    .dojoSplitPane {
        margin: 5px;
    }

    #rightPane {
        margin: 0;
    }

    TABLE {
        border-collapse: collapse;
        border: 1px solid black;
        font-size: 12px;
    }

    *#col1 {
        border: 3px solid black;
    }

    TD {
        border: 1px dotted green;
        padding: .25em;
    }

    TD.solid-blue {
        border: 5px dashed blue;
    }

        TD.dotted-black {
            border: 0px dotted black;
            padding: 10px;
        }

    TD.solid-green {
        border: 5px solid green;
    }
</style>

</head>
<body>

<table height="100%">
    <tr>
        <td colspan=2 valign="top">
            <table width="100%">
                <tr>
                    <td class="dotted-black" width=30>
                        <a href="javascript:sforce.tools.explorer.userInfo(); void 0;">
                            <img src="/img/users.gif" width="24" height="24" alt="User"></img></a><br>User
                    </td>

                    <td class="dotted-black" width=30>
                        <a href="javascript:sforce.tools.explorer.showTabs(); void 0;">
                            <img src="/img/solution.gif" width="24" height="24" alt="Clear"></img></a><br>Tabs
                    </td>

                    <td class="dotted-black" width=30>
                        <a href="javascript:sforce.tools.explorer.showTime(); void 0;">
                            <img src="/img/alarmclock.gif" width="24" height="24" alt="Clear"></img></a><br>Time
                    </td>

                    <td class="dotted-black">
                        <a href="mailto:ajaxtools@cheenath.com?Subject=Explorer-bug">
                        <img src="/img/icon_warning.gif" width="24" height="24" alt="Bug"></img></a><br>Bug
                    </td>
                   <td width=100% class="dotted-black">&nbsp;</td>
                </tr>
             </table>
        </td>
    </tr>
    <tr valign="top" height="100%">
        <td valign="top">
            <div> <b>SObject:</b> <br>
                <!--
                <select name="state" id="sobject" autocomplete="true" dojoType="Select" style="width: 300px;" autocomplete="false"
                                  onChange="javascript: sforce.tools.explorer.sobjectSelected();">
                                  -->
                    <select name="state" id="sobject" style="width: 300px;" autocomplete="false"
                            onChange="javascript: sforce.tools.explorer.sobjectSelected()">
            </select> <br>
                <div id="tree-div" height="100%"></div>
            </div>
        </td>
        <td valign="top">
            <div id="mainTabContainer"><textarea id="soql-ta" rows="10" cols="80">Please select SObject in the left pane</textarea></div>
            <input id="construct-query" style="display: none;" type="submit" value="Construct Query" name="Run Query" 
                   onclick="sforce.tools.explorer.fieldChanged()"></input>
            <input type="submit" value="Run Query" name="Run Query" onclick="sforce.tools.explorer.runQuery()"></input>
            <input type="submit" value="Run Query All" name="Run Query All" onclick="sforce.tools.explorer.runQueryAll()"></input>
            <input type="submit" value="Describe" name="Describe"
                   onclick="sforce.tools.explorer.showDescribe()"></input>
            <input type="submit" value="Layout" name="Layout" onclick="sforce.tools.explorer.showLayout()"></input>
            <input type="submit" value="Generate Sample" name="Generate Sample"
                   onclick="sforce.tools.explorer.generateSample()"></input>

            <div id="result-div">
                <h3>Explorer</h3>
                Please select an SObject from the left pane to display its
                fields and child relationships. You can then select the fields to
                generate SOQL query.
            </div>
        </td>
    </tr>
    <tr>
        <td colspan=2>
            <div style="background-color: #274383; color: white;"> Status:</div>
        </td>
    </tr>
</table>

<div dojoType="dialog" id="please-wait-dialog"
     bgColor="gray" bgOpacity="0.5" toggle="fade"
     toggleDuration="250">
    <b>Please Wait ...</b> <br> Loading describe data for the selected SObject.
    This can take a min or two. Thanks
</div>

</body>
</html>